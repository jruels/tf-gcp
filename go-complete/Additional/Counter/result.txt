kernel, 1
age, 1
methods 3
being 2
list:") 3
fileinfo 1
defer 10
/ 1
reached 1
len(data) 1
on 18
err 41
bufio.SplitFunc 1
something 4
need 8
break 3
.-. 1
simpler 1
initial 2
“array” 1
--.. 1
and 35
overview 1
helper 1
scripting 1
case, 2
tokens 1
achieve 1
every 2
values 1
does 1
etc. 1
commaidx 3
example, 2
offset, 1
create 2
often 1
byte 4
prematurely. 1
',') 1
really 1
i 3
extra 1
log.Fatal 1
basic 4
sent 1
that’s 4
built-in 1
Not." 1
io.ReadFull() 1
memory-conservative 1
pointer 7
wg 1
mental 2
mentioned 1
keeping 1
"_config.yml", 1
towards 1
use 3
avoided 1
confusion—multiple 1
instantiate 2
approach. 1
ioutil.ReadFile("_config.yml") 1
fileinfo, 2
upper 1
purposes, 1
techniques. 1
os.File 1
list 3
"pos" 2
convenience 1
close 1
two 3
we 22
number. 1
seen 2
original 1
Advent 1
wanted 1
Something 1
cumbersome, 1
previous 3
raised. 1
writing 2
speed 1
specific 2
scan 2
large 2
While 1
no 1
string(arrayOfBytes). 1
depending 2
attempt 1
good 1
operating 1
Node—return 1
BufferSize 3
argument, 1
readstring 2
descriptor 1
hence 1
meetings. 1
(default) 1
encounter 1
int) 1
bufio 2
“slice” 1
type 6
len(bytes)) 2
Typography 1
attempting 1
Returns 1
call 2
quite 1
wg.Done() 1
"name, 1
explicitly 1
this 21
will 5
them 1
but 6
signifiying 1
same. 1
Go—and 1
} 40
0; 1
chunk.offset) 1
lexing/parsing) 1
read 14
block 2
functions, 2
Bytes() 1
MORE 1
contains 3
“word” 1
know 2
array: 1
can 14
f.read(bufsize) 1
reach 1
treat 2
switching 1
sometimes 2
step 1
space. 1
bytesread, 3
required. 1
interchangeably 1
wg.Wait() 1
complexity 1
time, 1
Goroutine 1
newbuf...) 1
start 3
os.Open("filetoread.txt") 8
i) 1
At 1
draw 1
file.Stat() 2
filesize 4
simplicity 1
an 16
used: 2
encounters 1
package 2
ScanLines 1
scanner.Text() 1
len(words) 1
This 14
increasing 2
runes 1
int, 2
used. 1
about 1
A 2
track 1
passed 1
internally 2
Scanner 2
pretty 1
production 1
File.new 1
BufferSize; 1
CSV 3
bunch 1
too 1
all 2
buffer, 1
files, 1
simple 1
this, 1
it 5
bytestream. 1
Takes 1
reader. 1
ioutil.ReadAll() 1
1, 1
byte-wise 1
whether 1
you’re 1
than 5
that's 1
occur. 1
least 1
everything 1
it’s 2
be 12
My 2
translated 1
(after 1
end 8
loop, 2
position. 1
string(bytes)) 2
Github 7
errors, 1
conventions 1
Ruby: 1
then 2
power. 1
FUNCTIONS 1
Reader) 1
there 4
Compared 1
contiguous 1
intention 1
value 2
like: 1
techniques 2
kernel 1
io.EOF 2
(in 1
Ruby 1
fmt.Println(line) 1
pressure. 1
READING 1
BufferSize) 1
convenience. 1
tradeoff. 1
Kondamudi. 1
by 10
matter, 1
closing 1
during 1
in 29
declaration 1
so 3
error. 1
To 3
when 12
array/string 1
newbuf 1
scanner-word-list-grow.go 1
func(error) 1
= 10
following, 1
Splitting 2
string, 3
routine. 1
difference 1
length, 1
non-EOF 1
necessarily 1
memory 3
not 7
buffer[:bytesread]. 1
offset 1
line-to-line 1
(highly 1
nil, 2
gets 5
Read() 2
io.MultiReader 1
most 3
index 1
output 3
EOF. 1
Ex-banker. 1
nil 21
file.Close() 8
compared 3
differs 1
might've 1
word 7
shipping 1
words[pos] 1
uploading 1
package. 2
above? 1
differences. 1
log.Fatal(err) 4
But 1
newline 1
data[:commaidx] 1
left 2
???????. 1
“split” 1
into 5
case 5
utility 1
flag 1
Having 1
example: 1
routines! 1
learning 1
get 3
csvstring 1
I’ve 1
now 2
has 2
again 1
file/string 1
Errors 1
scanner 7
what’s 1
specify 1
file. 2
successful 2
doesn’t 1
buff. 1
calls 3
individual 1
ioutil.ReadFile(fileinfo.Name()) 1
Doing 1
program 2
reddit 1
“return”s. 1
DO 1
time 1
bufferSize) 2
benefit 1
GC 1
pos 2
Parsing 1
complete 1
Therefore, 1
fmt.Println("word 3
We 7
performance 1
reading-chunkwise-multiple.go 1
type, 1
[]string 3
So 3
Update 2
These 1
Text() 1
reserved. 1
might 5
not, 1
above, 1
atEOF 4
updated. 1
concurrency++ 1
“chunk” 1
buffer? 1
circumvented 1
results 1
Kashyap 2
me 1
note 1
detail: 1
ran 1
descriptors 1
useful 3
chunk.bufsize) 1
function. 2
be: 1
words 15
simplicity. 1
fmt.Println("bytestream 3
while 1
bytes. 1
words[:pos] 1
multi-core 1
100 5
“reader” 1
sync.WaitGroup 1
length. 1
io.ReadAtLeast() 1
using 8
want. 1
fewer 1
one 5
“waiting” 1
const 2
os.Exit 1
(kgrz/kwc) 1
signature 2
trying 1
SCANNING 1
examples. 1
[]byte, 4
were 2
string(buffer[:bytesread])) 2
break-ing 1
'\n') 1
iterating 2
those 1
Go-routines, 1
though. 2
filesize) 1
our 7
(100, 1
reslice 1
boolean 1
map 1
understand 1
ScanBytes 2
STYLE 1
control 1
script 1
--. 1
Go 1
instance, 1
iteration, 1
“grow” 1
file.Read() 1
down 1
caching 1
functions: 1
I’ll 1
int(fileinfo.Size()) 1
:D 1
files 5
wordcounter 1
Instead 1
per 1
managing 1
increases 1
reality, 1
add 2
twitter.com/kgrz 1
code, 1
works 1
make([]string, 2
languages. 1
reading-chunkwise.go 1
scanner.go 1
like 5
% 1
other 2
When 2
that 20
library 3
return-ing 1
wg.Add(concurrency) 1
operations, 1
satisfies 1
systems 1
f 1
bytesread 1
finish. 1
wordlist 1
(advance 2
Comma-seperated 2
multiple 6
var 4
buffer. 1
byte/string 1
primitive 1
Ruby-ish 1
low 1
taken 1
provides 1
slots 1
ioutil 1
© 1
Reading 13
utilities 1
respectively) 1
append 1
means 2
fileinfo.Size() 1
closer 1
file.Read(buffer) 2
size. 2
concurrency 1
concurrency; 1
append(words, 3
due 1
they 1
working 2
handleFn(file 1
takes, 1
function: 1
function 10
serially 1
:= 49
opposed 1
noted 1
ensure 1
ways 2
go 7
single 1
Some 1
early 3
marker, 1
data 7
manages 1
slightly 1
bufio.NewScanner(file) 4
stream. 1
APIs 1
converting 1
character. 1
0, 2
What 1
bufio.Scanner 1
infinite 1
scanner.Err(); 1
bytes.IndexByte(data, 1
interface 1
expensive 1
next 5
-.- 1
system 1
reader 3
mean 1
posts 1
os 1
bool) 2
bytes.TrimSpace(data), 1
repeat 2
readstring.nil? 1
main() 2
range 5
For 4
styles 1
are 11
All 3
line 1
current 1
never 1
rights 1
I 10
Go, 2
making 1
len(data), 1
if 35
confused 1
goroutines, 1
string(bytestream): 1
advances 2
ioutil.ReadDir(".") 1
auto-converting 1
bytes 6
HELPER 1
group. 1
reads 1
library. 1
string(buffer)) 1
shot 1
endup 1
If 3
Number 1
bufio.ScanWords 1
directory 2
update. 1
wasn’t 1
position 4
rather 1
work 4
}(chunksizes, 1
path 1
main 2
differences 1
", 12
error 5
between 2
Codemancers 1
with 6
hold 1
object, 1
step, 1
refer 1
NOT 2
limit. 1
objects. 2
started 1
define 2
Rob 1
level 1
read: 6
bloating 1
implements 1
os.Open("_config.yml") 1
OS. 1
instance 1
slices 1
fit 1
(like 1
object 1
case). 1
take 1
basis, 1
string. 1
io.EOF. 1
file.ReadAt(buffer, 1
returned. 1
scanner.Split(bufio.ScanLines) 2
did 1
scanner.Scan() 6
occupation" 1
is 34
only 6
above: 1
article, 1
// 30
major 1
missed 2
func(chunksizes 1
scanner.Bytes()) 1
repeating 1
> 2
*os.File) 1
defer, 1
Note: 1
lines:") 1
leakage 1
also 2
already 1
Currently 1
obtain 1
find 1
runes, 1
higher-level 1
number 8
from 5
value. 1
bufio.NewScanner 1
say, 1
input. 1
wg.Done(), 1
goto 1
done 1
fmt.Println("Bytes 2
cases, 1
exposes 1
should 1
data. 2
spawn. 1
Using 1
fmt.Println(scanner.Text()) 1
errors 2
same 5
functions 8
Read 3
So, 1
ScanCSV 1
scanner.Split(ScanCSV) 1
“read” 1
fmt.Println(err) 13
looks 1
pointer. 1
over. 1
similar 2
precisely, 1
required 1
style 1
evidence 1
post. 1
code 1
size 13
{ 41
hard 1
the 148
based 2
allocation 1
We’ve 1
assumptions 1
ScanRunes 1
read. 1
>= 1
combine 2
just 2
30 1
more 8
ScanWords 1
In 9
Since 1
line, 1
crucial 1
general 1
delimited 1
_, 5
avoid 4
each_codepoint 1
IO 2
basic.go 1
As 1
+ 1
update 1
io-like 2
larger 2
token 3
Pike: 1
shows 1
dynamic 2
"r" 1
starting 1
example 2
far 1
it’ll 1
year’s 1
I’m 9
language, 1
bound 1
because 5
construct 1
manually 1
(data 1
string 11
slighly 1
pre-initializing 1
method 1
bufsize 1
reading. 1
upfront. 1
end. 1
Note 1
increase 1
array 3
whole 1
it. 2
comma-separated-string.go 1
post 1
read/Read 1
character 1
empty 1
without 1
2017 1
The 6
advice 1
check 4
called 1
split 5
func 1
reading 7
once, 1
scanner.Split(bufio.ScanWords) 3
what 3
An 1
out 8
happens, 1
target 1
we've 1
called. 1
bytes, 2
let's 1
very 3
unicode 1
one-liner. 1
there's 1
scanner.Text()) 4
More 1
do 3
done. 1
up 3
long 5
os.Exit(). 1
routine 2
strings.NewReader 1
bytesread) 3
returned, 2
lines 3
predefined 1
Rubyist. 1
— 1
decreasing 1
above 2
cursor 1
times 1
concurrently 2
ReadAt 2
closes 1
internal 2
bytes) 1
kgrz/reading-files-in-go. 1
query 1
terminated 1
input 4
Needless 1
1 1
a 76
updated 1
we’d 1
UPDATE 1
improve 1
wait 1
signal 3
each_char, 1
interface, 1
bufio.NewScanner(strings.NewReader(longstring)) 1
languages 2
Say, 1
error) 3
listing 2
== 1
function, 2
Dec 1
at 6
ambigrams 1
issue 1
process 1
are: 1
behaves 1
certain 1
constant 1
was 3
off, 1
standard 4
pos++ 1
technique 1
`\n` 1
handle(err) 2
make 1
to 70
different 2
entirely, 1
puts 1
enough 1
until 5
func(data 1
following 1
created. 1
!= 20
return 20
Scanning 5
model 1
property 1
restricting 1
0 4
Returning 1
Or 1
handle 4
various 1
One 3
Always 1
chose 2
post, 1
positions 1
upfront 1
Ruby/Go 1
processing 1
see 1
entire 9
which 5
That’s 1
as 11
run 5
-> 3
encountered 1
inside 3
scanner. 1
once 1
highlight 1
problems 1
bufio.ScanLines 1
EOF 1
Add 1
advance 2
"This 1
file 26
examples 3
chunksizes[i] 1
read, 2
func(err 1
instead 1
for 26
size, 3
remainder 3
token. 1
github.com/kgrz 1
2018: 1
provided 2
You 1
We’ll 1
On 1
bufferSize 2
handleFn(file) 1
way 10
last 2
manipulation. 1
anonymous 1
correctly 1
any 4
pointed 1
BYTE-WISE 1
prints 1
There 2
expand 1
slice 1
or 2
some 6
resources 1
available 1
fmt.Println("read 3
actual 1
returns 1
buffer 20
linux, 1
showing 1
fmt.Println("bytes 3
both 1
much 2
bufio.NewScanner(strings.NewReader(csvstring)) 1
chunks 7
io.Reader 1
order 3
you 6
loop 2
files. 1
of 64
wrapped 1
defined 3
i++ 1
deferred 2
relying 1
Jan 1
these 2
upto 1
length 1
problem. 1
ended 1
string: 5
(or 1
iteration 3
routines 2
longstring 1
characters 1
operation 1
flickr.com/photos/kgrz 1
them, 2
50 1
fmt.Println("String 2
filelist, 1
bytes.TrimSpace(buffer), 1
filelist 1
used 5
scanner-example.go 1
RUBY-ISH 1
file, 14
incase 1
give 1
allocations 1
want 3
completion. 1
make([]byte, 3
[]chunk, 1
Scan() 1
fmt.Println(word) 3
comma, 1
found: 1
each 6
new 2
each_line, 1
we’ve 1
Code 1
over 2
blog 1
End 1
pre-requisites: 1
methods: 1
associated 1
have 5
chunk 2
&& 1
append(lines, 1
UTF-8 1
codepoints, 1
objects 1
Also 1
< 1
u/shovelpost. 1
Kondamudi 1
normal 1
fileinfo.Mode().IsRegular() 1
file: 1
